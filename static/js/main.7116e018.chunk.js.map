{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["onSubmitFunction","values","console","log","validationSchema","yup","name","required","email","password","min","max","contact","address","website","url","App","formik","useFormik","initialValues","onSubmit","style","padding","margin","textAlign","handleSubmit","Grid","container","spacing","item","xl","lg","xs","sm","md","sx","width","Stack","TextField","color","id","label","placeholder","variant","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7116e018.chunk.js","sourcesContent":["import './App.css';\nimport { Formik, Field, Form, useFormik } from \"formik\";\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { Grid } from '@mui/material';\nimport Item from '@mui/material/Grid'\nimport * as yup from 'yup';\n\n// function doSomething(values) {\n//   console.log(\"values: \", values)\n// }\n\nfunction onSubmitFunction(values) {\n  console.log(\"values: \", values)\n}\n\nconst validationSchema = yup.object({\n\n  name: yup\n    .string('Enter your Name')\n    .required('Name is required'),\n\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .max(10, 'No more then 10')\n    .required('Password is required'),\n\n  contact: yup\n    .string('Enter your Contact')\n    .min(11, \"invalid number\")\n    .max(11, \"invalid number\")\n    .required('contact number is required'),\n\n  address: yup\n    .string('Enter your address')\n    .required('Address is required'),\n  website: yup\n    .string('Enter your profile/URL')\n    .url(\"please enter valid URL e.g: https://somewebsite.com\")\n    .required('profile/URL is required'),\n});\n\nfunction App() {\n\n  const formik = useFormik({\n    validationSchema: validationSchema,\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      contact: '',\n      address: '',\n      website: '',\n    },\n    onSubmit: onSubmitFunction\n  });\n\n  return (\n    <div style={{ padding: \"1rem\" }}>\n      <h1 style={{ margin: \"auto\", padding: \"1rem\", textAlign: \"center\" }}>Sign Up</h1>\n      <br />\n      {/* <Formik\n        initialValues={{ name: \"\", email: \"\" }}\n        onSubmit={doSomething}\n      >\n        <Form>\n          <Field name=\"name\" type=\"text\" />\n          <Field name=\"email\" type=\"email\" />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik> */}\n\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={2}>\n          <Grid item xl={6} lg={6} xs={12} sm={12} md={12} sx={{ width: \"50%\", margin: \"auto\" }} >\n            <Item >\n              <Stack spacing={3}  >\n                <TextField\n                  color=\"primary\"\n                  id=\"outlined-basic\"\n                  label=\"Name\"\n                  placeholder=\"enter your name\"\n                  variant=\"outlined\"\n                  name=\"name\"\n                  value={formik.values.name}\n                  onChange={formik.handleChange}\n                  error={formik.touched.name && Boolean(formik.errors.name)}\n                  helperText={formik.touched.name && formik.errors.name}\n                />\n\n                <TextField\n                  color=\"primary\"\n                  id=\"outlined-basic\"\n                  label=\"Email\"\n                  placeholder=\"enter email address\"\n                  variant=\"outlined\"\n                  name=\"email\"\n                  value={formik.values.email}\n                  onChange={formik.handleChange}\n                  error={formik.touched.email && Boolean(formik.errors.email)}\n                  helperText={formik.touched.email && formik.errors.email}\n                />\n\n                <TextField\n                  color=\"primary\"\n                  id=\"filled-basic\"\n                  label=\"Password\"\n                  placeholder=\"enter your password\"\n                  variant=\"outlined\"\n                  type=\"password\"\n                  name=\"password\"\n                  value={formik.values.password}\n                  onChange={formik.handleChange}\n                  error={formik.touched.password && Boolean(formik.errors.password)}\n                  helperText={formik.touched.password && formik.errors.password}\n                />\n\n                <TextField\n                  color=\"primary\"\n                  id=\"filled-basic\"\n                  label=\"Contact\"\n                  placeholder=\"enter your Contact Number\"\n                  variant=\"outlined\"\n                  // type=\"s\"\n                  name=\"contact\"\n                  value={formik.values.contact}\n                  onChange={formik.handleChange}\n                  error={formik.touched.contact && Boolean(formik.errors.contact)}\n                  helperText={formik.touched.contact && formik.errors.contact}\n                />\n\n                <TextField\n                  color=\"primary\"\n                  id=\"filled-basic\"\n                  label=\"address\"\n                  placeholder=\"enter your address\"\n                  variant=\"outlined\"\n                  name=\"address\"\n                  value={formik.values.address}\n                  onChange={formik.handleChange}\n                  error={formik.touched.address && Boolean(formik.errors.address)}\n                  helperText={formik.touched.address && formik.errors.address}\n                />\n\n                <TextField\n                  color=\"primary\"\n                  id=\"outlined-basic\"\n                  label=\"linkedInURL/Profile\"\n                  placeholder=\"enter URL here\"\n                  variant=\"outlined\"\n                  name=\"website\"\n                  value={formik.values.website}\n                  onChange={formik.handleChange}\n                  error={formik.touched.website && Boolean(formik.errors.website)}\n                  helperText={formik.touched.website && formik.errors.website}\n                />\n                <Grid item xl={3} lg={3} xs={4} sm={4} md={4}>\n                  <Item >\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">Sign Up</Button>\n                  </Item >\n                </Grid>\n              </Stack>\n            </Item >\n          </Grid>\n        </Grid>\n\n      </form>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}